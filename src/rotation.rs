pub const RELATIVE_MINOS_I: [[(isize, isize); 4]; 4] = [ // Offsets from piece midpoint (DR, DC)
    [( 0, -1), (0, 0), (0, 1), (0, 2)], // Rotation index 0: spawn orientation
    [(-1,  1), (0, 1), (1, 1), (2, 1)], //                1: 90 degrees cw
    [( 1, -1), (1, 0), (1, 1), (1, 2)], //                2: 180 degrees
    [(-1,  0), (0, 0), (1, 0), (2, 0)], //                3: 90 degrees ccw
];

pub const RELATIVE_MINOS_J: [[(isize, isize); 4]; 4] = [
    [(-1, -1), ( 0, -1), (0,  0), (0, 1)],
    [(-1,  0), (-1,  1), (0,  0), (1, 0)],
    [( 0, -1), ( 0,  0), (0,  1), (1, 1)],
    [(-1,  0), ( 0,  0), (1, -1), (1, 0)],
];

pub const RELATIVE_MINOS_L: [[(isize, isize); 4]; 4] = [
    [(-1,  1), ( 0, -1), (0, 0), (0,  1)],
    [(-1,  0), ( 0,  0), (1, 0), (1,  1)],
    [( 0, -1), ( 0,  0), (0, 1), (1, -1)],
    [(-1, -1), (-1,  0), (0, 0), (1,  0)],
];

pub const RELATIVE_MINOS_O: [[(isize, isize); 4]; 4] = [
    [(-1, 0), (-1, 1), (0, 0), (0, 1)],
    [(-1, 0), (-1, 1), (0, 0), (0, 1)],
    [(-1, 0), (-1, 1), (0, 0), (0, 1)],
    [(-1, 0), (-1, 1), (0, 0), (0, 1)],
];

pub const RELATIVE_MINOS_S: [[(isize, isize); 4]; 4] = [
    [(-1,  0), (-1,  1), (0, -1), (0, 0)],
    [(-1,  0), ( 0,  0), (0,  1), (1, 1)],
    [( 0,  0), ( 0,  1), (1, -1), (1, 0)],
    [(-1, -1), ( 0, -1), (0,  0), (1, 0)],
];

pub const RELATIVE_MINOS_T: [[(isize, isize); 4]; 4] = [
    [(-1,  0), ( 0, -1), (0, 0), (0, 1)],
    [(-1,  0), ( 0,  0), (0, 1), (1, 0)],
    [( 0, -1), ( 0,  0), (0, 1), (1, 0)],
    [(-1,  0), ( 0, -1), (0, 0), (1, 0)],
];

pub const RELATIVE_MINOS_Z: [[(isize, isize); 4]; 4] = [
    [(-1, -1), (-1,  0), (0, 0), (0,  1)],
    [(-1,  1), ( 0,  0), (0, 1), (1,  0)],
    [( 0, -1), ( 0,  0), (1, 0), (1,  1)],
    [(-1,  0), ( 0, -1), (0, 0), (1, -1)],
];

pub const KICK_TABLE_CW_REGULAR: [[(isize, isize); 5]; 4] = [ // Positions to check for a clockwise rotation of J, L, S, Z or T (dx, dy)
    [(0, 0), (-1, 0), (-1,  1), (0, -2), (-1, -2)], // 3 -> 0
    [(0, 0), (-1, 0), (-1, -1), (0,  2), (-1,  2)], // 0 -> 1
    [(0, 0), ( 1, 0), ( 1,  1), (0, -2), ( 1, -2)], // 1 -> 2
    [(0, 0), ( 1, 0), ( 1, -1), (0,  2), ( 1,  2)], // 2 -> 3
];

pub const KICK_TABLE_CW_I: [[(isize, isize); 5]; 4] = [
    [(0, 0), ( 1, 0), (-2, 0), ( 1,  2), (-2, -1)], // 3 -> 0
    [(0, 0), ( 1, 0), (-2, 0), (-2,  1), ( 1, -2)], // 0 -> 1
    [(0, 0), (-1, 0), ( 2, 0), (-1, -2), ( 2,  1)], // 1 -> 2
    [(0, 0), ( 2, 0), (-1, 0), ( 2, -1), (-1 , 2)], // 2 -> 3
];

pub const KICK_TABLE_CCW_REGULAR: [[(isize, isize); 5]; 4] = [
    [(0, 0), ( 1, 0), ( 1,  1), (0, -2), ( 1, -2)], // 1 -> 0
    [(0, 0), (-1, 0), (-1, -1), (0,  2), (-1,  2)], // 2 -> 1
    [(0, 0), (-1, 0), (-1,  1), (0, -2), (-1, -2)], // 3 -> 2
    [(0, 0), ( 1, 0), ( 1, -1), (0,  2), ( 1,  2)], // 0 -> 3
];

pub const KICK_TABLE_CCW_I: [[(isize, isize); 5]; 4] = [
    [(0, 0), (-1, 0), ( 2, 0), (-1,  2), ( 2, -1)], // 1 -> 0
    [(0, 0), (-2, 0), ( 1, 0), (-2, -1), (-1,  2)], // 2 -> 1
    [(0, 0), ( 1, 0), (-2, 0), ( 1, -2), (-2,  1)], // 3 -> 2
    [(0, 0), (-1, 0), ( 2, 0), ( 2,  1), (-1, -2)], // 0 -> 3
];